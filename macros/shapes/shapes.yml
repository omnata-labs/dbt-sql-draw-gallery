version: 2

macros:
  - name: is_in_circle
    description: |
      This macro returns a boolean expression to indicate if the x and y values fall within the bounds of a circle.

      Slack-friendly example:
      ```
      update bitmap_pixels set colour = '#D2691E'
      where {{ '{{' }} is_in_circle([150,150],20) {{ '}}' }}
      ```
    arguments:
      - name: center
        type: list
        description: A list containing the x and y coordinates of the centre of the circle (e.g. [50,75])
      - name: diameter
        type: number
        description: The diameter of the circle

  - name: is_in_oval
    description: |
      This macro returns a boolean expression to indicate if the x and y values fall within the bounds of an oval.

      Slack-friendly example:
      ```
      update bitmap_pixels set colour = '#D2691E'
      where {{ '{{' }} is_in_oval([150,150],20,0.5,1) {{ '}}' }}
      ```

    arguments:
      - name: center
        type: list
        description: A list containing the x and y coordinates of the centre of the oval (e.g. [50,75])
      - name: diameter
        type: number
        description: The diameter of the oval. This is given as the diameter of an unsquashed axis (e.g. a value of 100 along with a ratio_x of 0.5, would mean the oval is actually 50 pixels wide)
      - name: ratio_x
        type: number
        description: How much to squash the oval vertically (e.g. 0.5 means the oval's height will be half of its width)
      - name: ratio_y
        type: number
        description: How much to squash the oval horizontally (e.g. 0.5 means the oval's width will be half of its height)
      - name: rotation
        type: number
        description: The angle to rotate the oval, where the value of pi (~3.1) represents a full 360 rotation.

  - name: is_in_rectangle
    description: |
      This macro returns a boolean expression to indicate if the x and y values fall within the bounds of an oval.

      Slack-friendly example:
      ```
      update bitmap_pixels set colour = '#D2691E'
      where {{ '{{' }} is_in_rectangle(bottom_left=[45,100], top_right=[50,120]) {{ '}}' }}
      ```

    arguments:
      - name: bottom_left
        type: list
        description: A list containing the x and y coordinates of the bottom left point of the rectangle (e.g. [50,75])
      - name: top_right
        type: list
        description: A list containing the x and y coordinates of the top right point of the rectangle (e.g. [150,125])

  - name: is_in_spiral_point
    description: |
      This macro returns a boolean expression to indicate if the x and y values fall within points of a logarithmic spiral.

      Slack-friendly example:
      ```
      update bitmap_pixels set colour = '#D2691E'
      where {{ '{{' }} is_in_spiral_point(center=[50,50], step_size=0.1, outward_movement=1.9, starting_point=5, total_length=6, rotation=-1) {{ '}}' }}
      ```

    arguments:
      - name: center
        type: list
        description: A list containing the x and y coordinates of the center point of the spiral (e.g. [50,75])
      - name: starting_point
        type: number
        description: How many points away from the center to start drawing from
      - name: step_size
        type: number
        description: The distance between each point on the spiral. The shorter the distance, the more obvious the path looks
      - name: outward_movement
        type: number
        description: How quickly the spiral travels away from the center. The shorter the outward movement, the more rotations will be visible on the canvas
      - name: total_length
        type: number
        description: The total length of the spiral. Once the spiral has left the bounds of the canvas, larger values have no effect
      - name: rotation
        type: number
        description: Determines the direction that the spiral first sets off in

  - name: is_on_bezier_curve
    description: |
      This macro returns a boolean expression to indicate if the x and y values fall within points of a calculated bezier curve.
      For a detailed description of the maths behind this macro, see this page: https://javascript.info/bezier-curve#maths

      Slack-friendly example:
      ```
      update bitmap_pixels set colour = '#D2691E'
      where {{ '{{' }} is_on_bezier_curve(control_points=[[20,20],[50,100],[70,10]], interval=0.01) {{ '}}' }}
      ```

    arguments:
      - name: control_points
        type: list
        description: A list of lists containing the x and y coordinates of each of the control points (e.g. [[0,20],[40,70],[50,10],[80,80]])
      - name: interval
        type: number
        description: The t interval as described in the link above. The larger the values, the further apart the curve points will be. For a 100x100 canvas, a value of 0.01 ensures a solid line (100 points between 0 and 1).